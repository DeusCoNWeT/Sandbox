#!/usr/bin/env node

/*
Copyright (c) 2016, Miguel Ortega Moreno <miguel.ortega.moreno5@gmail.com>

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,INDIRECT,
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

// DEPENDENCIES

var program = require('commander');

var log4js = require('log4js');
var fs = require('fs');
var Mixpanel = require('mixpanel');
var Report = require('./src/Report.js');

var WCAG2A_RULES = require('./wcag_norms/WCAG2A');
var WCAG2AA_RULES = require('./wcag_norms/WCAG2AA');
var WCAG2AAA_RULES = require('./wcag_norms/WCAG2AAA');
var A11Y_RULES = require('./wcag_norms/A11y');

var WEIGHT = require('./wcag_norms/weight');
var CATEGORY = require('./wcag_norms/categories');
var CATEGORY_TOTAL = CATEGORY.length;
var WCAG2A_TOTAL = WCAG2A_RULES.length;
var WCAG2AA_TOTAL = WCAG2AA_RULES.length;
var WCAG2AAA_TOTAL = WCAG2AAA_RULES.length;
var A11Y_TOTAL = A11Y_RULES.length;
var EXP_ID; 


logger = log4js.getLogger('ACC');
loggerConsole = log4js.getLogger('CONSOLE');
logger.setLevel('INFO');
loggerConsole.setLevel('INFO');

// INTERNAL VAR
var sitepage,
  phInstnace,
  test_url,
  failed = 0;



// Program options
program
  .version('0.1.0')
  .description("Accesibility test for web components. It use WCAG2 and A11Y")
  .usage('[options] <test_file>')
  .option('-p --port <port>', 'Server port. Default 8080', parseInt)
  .option('-t --timeout <timeout>', 'Waiting time before execute', parseInt)
  .option('-r --root <dir>', 'Directory root for the server')
  .option('-h --host <host>', 'Host direction. Default 0.0.0.0')
  .option('-o --output <file>', 'Output file')
  .option('--https', 'Use HTTPS instance of HTTP')
  .option('--config <conf_file>', 'Configuration file')
  .option('--skip', 'Does not print result on console')
  .option('--brief', "Brief report")
  .option('--viewport', 'View port size')
  .option('--log <level>', 'Output message level')
  .option('--wcag2 <wcag2_level>', 'WCAG2 level: A AA or AAA')
  .option('-l --list <list_components>', 'List of index')
  .option('--skip_errors', "Skip console errors")
  .option("--nomixpanel", "No send data to mixpanel")
  .option("--token", "Mixpanel token")
  .arguments('<test_file> ')
  .action(function (test) { test_dir = test; })
  .parse(process.argv);

if (program.config) {
  program.config = JSON.parse(fs.readFileSync(program.config, 'utf8'));
  for (var property in program.config) {
    program[property] = program.config[property];
  }
}

// Init config
program.config = program.config || {};
if (typeof test_dir === 'undefined' && !program.config.components) {
  program.help();
}
program.config.errorsByWarning = program.config.errorsByWarning || 4;
// Init mixpanel
if ((program.config && program.config.mixpanel_token) || program.mixpanel_token) {
  var mixpanel_usability = Mixpanel.init(program.config.mixpanel_token);
}


// Set log level
logger.setLevel(program.log || "INFO");
loggerConsole.setLevel(program.log || "INFO");
Report._setReportLevel(program.log || 'INFO');

// truncate the output file
if (program.output && fs.existsSync(program.ouput)) {
  fs.truncateSync(program.output, 0);
} else if (program.output) {
  var fd = fs.openSync(program.output, 'w');
  fs.closeSync(fd);
}

// Set default server options
program.host = program.host || 'localhost'; //default host localhost
program.port = program.port || 8080; // default server port 8080
program.protocol = program.https ? 'https' : 'http';
program.root = program.root || "";
program.root += program.root[program.root.length - 1] == '/' || program.root == "" ? "" : '/';

// Set default phantomjs options
program.timeout = program.timeout || 0;
program.viewport = program.viewport || '1024x768';
program.viewport = program.viewport.split('x');
program.viewport = { width: program.viewport[0], height: program.viewport[1] };
var phantom_options = { 'web-security': 'no' };



// Default test wcag2 and a11y options
program.wcag2_level = program.wcag2_level && program.wcag2_level.match(/^([A]{1,3})$/) ? program.wcag2_level.toUpperCase() : 'AAA';
program.wcag2 = program.wcag2 == undefined ? true : program.wcag2;
program.a11y = program.a11y == undefined ? true : program.a11y;



// get exp id
EXP_ID = program.config.exp_id || new Date().getTime();


Report._setProgram(program);
var usability_value;
/**
 * Send usability errors to mixpanel using the token provided. In addition, it sends usability value
 * pass/(errors+pass)
 * 
 * @param {any} errors list of errors
 * @param {any} component name of the component analyzed
 * @returns 
 */
function sendToMixpanel(list_errors, component) {


  if (!mixpanel_usability) {
    logger.error("Cannot be sent to mixpanel. Mixpanel token is missing");
    return -1;
  }

  var warning = list_errors.WARNING.length;
  //var errors = list_errors.ERROR.length + Math.floor(warning / program.config.errorsByWarning);
  var errors = {};
  list_errors.ERROR.forEach(function(norm){
    if(errors[norm.category] === undefined){
      errors[norm.category] = 1;
    } 
    else{
      errors[norm.category] += 1;
    }
  });
  var pass = list_errors.PASS.length;

  // var totalItemsCat = CATEGORY.
  // var total = WCAG2AAA_TOTAL + A11Y_TOTAL - EQUIVALENTS_NORM;
  // var usability_value = (total - errors) / total;

  ////////MIO/////////////
  var sum = 0;
  var i;
  for(i = 0; i < CATEGORY_TOTAL; i++){
      var numItemCat = CATEGORY[i].items.length;
      var errCat = errors[i] || 0;
      sum += (Math.max(0, numItemCat-errCat*CATEGORY[i].weigth)) / numItemCat;
  }

  usability_value = sum / CATEGORY_TOTAL;
  console.log("Valor mixpanel");
  console.log(usability_value);

  var checkedNorms = checkNorms(list_errors);

  var data = {
    errors: list_errors.ERROR.length,
    warning: list_errors.WARNING.length,
    notice: list_errors.NOTICE.length,
    pass: list_errors.PASS.length,
    usability_value: usability_value,
    passWCAG2A: checkedNorms.WCAG2A,
    passWCAG2AA: checkedNorms.WCAG2AA,
    passWCAG2AAA: checkedNorms.WCAG2AAA,
    passA11Y: checkedNorms.A11Y,
    exp_id: EXP_ID
  };

  mixpanel_usability.track(component, data, function (err) {
    if (err) {
      logger.error("Error sending to mixpanel\n", err);
    }
  });
}

/**
 * MAIN
 */
(function () {
  if (!program.config.components) {
    if (test_dir.indexOf(program.root) === 0) {
      test_dir = test_dir.replace(program.root, '');
    }
    var component = test_dir;
    test_dir = program.protocol + '://' + program.host + ':' + program.port + '/' + test_dir;
    Report.analyze_file(test_dir, component).then(function(errors){
      Report.printAllReport(errors, component);
      Report.generateReport(errors, component, program.output);
      process.exit(0);
    });
  } else {

    var components_index = program.config.components;
    function execute_test(initial, end) {
      return new Promise(function (resolve, reject) {
        if (initial >= end) {
          resolve();
          setTimeout(function () {
            process.exit(1);
          }, 5000)
        } else {
          var dir = program.protocol + '://' + program.host + ':' + program.port + '/' + components_index[initial];
          Report.analyze_file(dir, components_index[initial]).then(function (errors) {
            logger.debug("Se retorna bien de analyze");
            Report.printAllReport(errors, components_index[initial]);
            Report.generateReport(errors, components_index[initial], program.output);
            execute_test(initial + 1, end).then(function (err) {
              resolve();
            });
          }, function (err) {
            logger.error("Error al volver de analyze", err);
            resolve();
          })
        }
      })
    }

    execute_test(0, components_index.length, function () {
      logger.debug("Se termina de ejecutar");
      process.exit(0);
    }, function (err) {
      process.exit(1);
    });
  }
})();