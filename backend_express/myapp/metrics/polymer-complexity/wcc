#!/usr/bin/env node

// DEPENDENCIES
var program = require('commander');
var utils = require('./src/Utils');
var report = require('./src/Report');
var mixpanel_report = require('./src/Mixpanel_report');
var async = require('async');
var fs = require("fs");
// STATIC FOLDER
var TMP_FOLDER = '.tmp_plato/';

// Program options
program
  .version('1.0.0')
  .option('-o --output <output>', 'Directory of output will be stored')
  .option('-r --recursive', 'Enable recursive analyze')
  .option('-d --delete', 'Remove output folder if exist')
  .option('-c --config <config></config>', 'Config file')
  .option('--nomixpanel', 'Avoid to send data to mixpanel')
  .arguments('<component>')
  .action(function (component) {
    program.component = component;
  })
  .parse(process.argv);

// Required arguments
if (typeof program.component === 'undefined' && typeof program.config === 'undefined') {
  program.help();
}
program.output = program.output || 'results';


if (program.config) {
  var config = fs.readFileSync(program.config, 'utf-8');
  program.config = JSON.parse(config);
}



// MAIN
if (program.delete) deleteFolderRecursive(program.output);


if (program.config) {
  var components = program.config.components;
  var base_folder = program.config.base_folder || "";

  // change string to array of 1 element  
  if (typeof components === 'string') components = [components];

  // if base_folder is set, check if last char is folder delimiter
  if (base_folder && base_folder.slice(-1) !== "/") base_folder += "/";


  var promises = components.map(function (component) {
    return new Promise(function (resolve, reject) {
      var folder = base_folder + component;
      report.analyze(folder).then(function (result) {
        var report = {};
        report[component] = result;
        resolve(report);
      }, reject);
    });
  });

  Promise.all(promises).then(function (final_report) {
    report.cleanFolders();
    console.log("Generating reports...\n");
    report.generateReport(final_report, program.output);
    console.log('RESULT:')

    final_report.forEach(function (report) {
      for (var name in report) {
        if (report.hasOwnProperty(name)) {
          if (!program.nomixpanel) mixpanel_report.sendMixpanel(name, report[name], program.mixpanel_report);
          console.log('+\x1b[33m ' + name + ':\x1b[0m');
          console.log('\t*\x1b[36m maintainability: \x1b[1;36m' + report[name].js[0].complexity.maintainability + '\x1b[0m');
          console.log('\t*\x1b[36m complexity: \x1b[1;36m' + report[name].js[0].complexity.methodAverage.cyclomatic + '\x1b[0m');
        }
      }
    });
    if (!program.nomixpanel) console.log('\nRegistered on mixpanel');
  }, function (err) {
    console.log(err);
  });


} else {
  report.analyze(program.component, program).then(function (report) {
    report.generateReport(report, program.output);
  }, function (err) {
    console.log('It couldn\'t read all the files');
  });
}